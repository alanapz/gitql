scalar GraphQLTimestamp

enum TreeItemType {
    BLOB
    SUBTREE
}

enum TagItemType {
    COMMIT
}

enum RefType {
    BRANCH
    REMOTE_TRACKING_BRANCH
    TAG
}

type Query {
    repository(path: String!): Repository
    debug: String
}

type Repository {
    path: String!
    blobs: [Blob!]!
    blob(id: String!): Blob
    trees: [Tree!]!
    tree(id: String!): Tree
    commits: [Commit!]!
    commit(id: String!): Commit
    refs: [Ref!]!
    ref(name: String!): Ref
}

type Blob {
    id: String!
    repository: Repository!
    size: Int!
    value: String!
}

type Tree {
    id: String!
    repository: Repository!
    items: [TreeItem!]!
    "Returns the corresponding tree item for the name, recursively if necessary (eg: folder/subfolder/subsubfolder/file)"
    item(name: String!): TreeItem
    "Returns all items in the corresponding tree, recursively and including subfolders"
    descendants: [TreeDescendant!]!
}

type TreeItem {
    tree: Tree!
    name: String!
    type: TreeItemType!
    "The ID of the destination object, not the item"
    id: String!
    "The filesystem mode bits for this item"
    mode: Int!
    "Returns the corresponding Blob for this tree item (Only valid for TreeItemType.BLOB)"
    blob: Blob
    "Returns the corresponding Subtree for this tree item (Only valid for TreeItemType.SUBTREE)"
    subtree: Tree
}

type TreeDescendant {
    path: String!
    item: TreeItem!
}

type Commit {
    id: String!
    repository: Repository!
    parents: [Commit!]!
    tree: Tree!
    author: String!
    committer: String!
    message: String!
    ancestors: [Commit!]!
}

type Tag {
    name: String!
    repository: Repository!
    type: TagItemType!
    tagger: Author!
    message: String!
    "Returns the corresponding commit for this tag (Only valid for type COMMIT)"
    commit: Commit
}

type Ref {
    name: String!
    repository: Repository!
    type: RefType!
    "Returns the target commit this ref (Only valid for types BRANCH and REMOTE_TRACKING_BRANCH)"
    commit: Commit
    "Returns the branch name for this ref (Only valid for types BRANCH and REMOTE_TRACKING_BRANCH)"
    branchName: String
    "Returns the remote name for this ref (Only valid for type REMOTE_TRACKING_BRANCH)"
    remoteName: String
    "Returns the target tag this ref (Only valid for type TAG)"
    tag: Tag
}

type Author {
    name: String!
    emailAddress: String!
    timestamp: GraphQLTimestamp
}

schema {
    query: Query
}

